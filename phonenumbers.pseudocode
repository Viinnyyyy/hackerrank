Pseudocode for /Users/mac/Documents/hackerrank/phonenumbers.py
==============================================================

The only constant or rather constraint on the code is the starting number and the length of the number:
The length is 15 and the starting number is from 7-9.

The input
=========
n+1 lines:
Where the first input is the amount of lines that are to be checked-->
	Could we print all as it is there to save memory?
	Or append it as a string with '\n' as the factor for joining them.

The output
==========
YES or NO as depends on whether it is a valid number or not


Process
=======
Get the first number and use it like a while function.
import re
phonebook = ''
while i < n:
     phonenumber = str(input())
     num_detector = re.compile(r"^[7-9](\d{14})$")
     validator = num_detector.match(string)
     if validator:
	print('YES')
     else:
	print('NO')
     lambda number: 'YES' if validator==True else: 'NO'

While the number validator is working, what can be done to make the program run smoother?
Remember that we are already looping "n" times for the input,right?

So it makes no sense to have multiple loops in themselves.
Why? Time complexity is increasing as the nested loop functions increase.

So there can either be two loop functions in parallel OR
We have one loop function in which the functions and operations are happening simultaneously per loop.

Which would be less computationally tasking and demanding on the computer program?

So we make the regex compute in real time, the necessary validity for each input

Read in n
validity list
While no of input <= n:
    regex comparison;
    Valid or invalid
    Append result to a string/list
    move to next input
print the list as a string, separated by newlines    

=====>LOL<=======
I was so stupid
After I wrote the constraints, I still made the error of not putting the constraints on it mehhn.

{1,14} should be the constraints on the length <<===That can be inputted

=====>LOL *2<=======
I made the above error AGAINNN.
I made the mistake of taking the length of the constraints as the validity status for the number. The number is meant to be 10 digits only.

The validity is meant to be {9}
